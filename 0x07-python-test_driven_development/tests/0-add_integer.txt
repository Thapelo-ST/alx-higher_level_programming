============================
How to use 0-add_integer.py
============================

This function is very simple to use it adds two numbers if they are inserted

Using Numbers
=============

first import the module and store it:
::

    >>> add_integer = __import__("0-add_integer").add_integer

and import the document doc string.
::

    >>> m = __import__("0-add_integer").__doc__
    >>> len(m) > 1
    True

you can use the function in this format after importing it.
::

    >>> add_integer(1,3)
    4
    >>> add_integer(1000000000,9999999999999999999999)
    10000000000000999999999

you can use it with negative numbers as well.
::

    >>> add_integer(1,-3)
    -2

    >>> add_integer(-3,-3)
    -6

    >>> add_integer(-1,-1)
    -2

you can useit with big Numbers.
::

    >>> add_integer(9876543210987654321098765432109876543210,1234567890123456789012345678901234567890)
    11111111101111111110111111111011111111100

Using with Strings
==================
::

    >>> add_integer('hello',50)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer([50, 200, 100], 'python')
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

Using with floats
=================
::

    >>> add_integer(2.67,3.67)
    5

    >>> add_integer(50.6997,50.6007)
    100

Using with lists
================
::

    >>> add_integer([50, 200, 100], [200, 2, 30])
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

using with empty variables
==========================
::

    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

using with default value
========================
::

    >>> add_integer(100)
    198

    >>> add_integer(2)
    100

    >>> add_integer(-20)
    78

    >>> add_integer(-98)
    0

    >>> add_integer('e')
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

using NaNn
==========
::

    >>> add_integer(98, float('nan'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer

using inf
=========
::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('inf'), 98)
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

using number and not a number
=============================
::

    >>> add_integer(20, [98])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer('20', 98)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

using values that a never numbers
=================================
::
    >>> add_integer('20', [98])
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer